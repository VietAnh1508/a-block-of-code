[
  
   
      {
        "title"    : "Hệ thống phân tán là gì?",
        "category" : "",
        "tags"     : " ",
        "url"      : "/a-block-of-code/2018/10/21/he-thong-phan-tan-la-gi.html",
        "date"     : "October 21, 2018",
        "excerpt"  : "<p>Hầu hết (nếu không muốn nói là tất cả) các ứng dụng mà chúng ta đang sử dụng ngày nay, đặc biệt là ứng dụng web, được phát triển theo mô hình centralized. Nghĩa là bạn sẽ thiết kế, triển khai code, rồi build toàn bộ ứng dụng thành 1 instance , ...",
        "content"  : "<p>Hầu hết (nếu không muốn nói là tất cả) các ứng dụng mà chúng ta đang sử dụng ngày nay, đặc biệt là ứng dụng web, được phát triển theo mô hình centralized. Nghĩa là bạn sẽ thiết kế, triển khai code, rồi build toàn bộ ứng dụng thành 1 instance , sau đó quăng cái instance này lên máy chủ được cung cấp bởi bên thứ 3 (Google cloud, Microsoft Azure, AWS…). User/ client sẽ truy cập đến ứng dụng của bạn thông qua một máy chủ tập trung, và ngược lại, máy chủ này cung cấp nhiều session cho các user. Mô hình web hiện tại có thể tách biệt 1 application thành backend và frontend, hay thậm chí tách ứng dụng thành các microservices, nhưng nhìn chung, bạn vẫn sẽ deploy toàn bộ đống này lên máy chủ của bên thứ 3.</p>\n\n<p><img src=\"../../../assets/img/posts/centralized.png\" alt=\"centralized system\" /></p>\n\n<p>Vậy mô hình này có vấn đề gì? Câu trả lời là chả có vấn đề gì cả, cả thế giới vẫn đang code theo centralized đó thôi. Nhưng hãy tưởng tượng, một ngày nào đó, cloud server mà bạn đang thuê lăn đùng ra chết ( ͡° ͜ʖ ͡°). Việc này rất khó có khả năng xảy ra, vì máy chủ của Google, Amazon… chết là chuyện không tưởng. Nhưng… cuộc đời mà, biết đâu thiên tai, chiến tranh, khủng bố phá hủy cơ sở hạ tầng của các ông lớn này thì sao? Hay một khả năng dễ xảy ra hơn, account của bạn bị ban (ᴗ ͜ʖ ᴗ), toàn bộ data của bạn sẽ mất trắng. Bạn có thể nói ôi dào không chơi với thằng này thì mình host server ở hệ thống khác, thị trường cạnh tranh mà. Đúng là không có vấn đề gì khi bạn host một ứng dụng nhỏ, nhưng đối với các công ty vừa và lớn, lượng data nhiều, phục vụ hàng ngàn, hàng triệu user, chết cloud server chả khác gì phá sản. Chưa kể đến chi phí chuyển giao hạ tầng từ nhà cung cấp này sang nhà cung cấp khác.</p>\n\n<p>Hoặc bạn đang sống trong một đất nước nào đó mà chính phủ yêu cầu phải cung cấp dữ liệu người dùng, hay hệ thống của bạn bị chi phối, kiểm duyệt… đó là lúc bạn cân nhắc đến hệ thống phân tán (decentralized).</p>\n\n<h3 id=\"hệ-thống-phân-tán-là-khỉ-gì\">Hệ thống phân tán là khỉ gì?</h3>\n\n<p><img src=\"../../../assets/img/posts/decentralized.png\" alt=\"decentralized application\" />\nDecentralized Application (Dapp) giải quyết các vấn đề nêu trên bằng cách… chả host app của bạn trên server nào cả, mỗi user sẽ là 1 node trong mạng lưới và có 1 database riêng, database này được sync với mọi node khác trong hệ thống thông qua mạng máy tính (nghe quen quen đúng không? ừ đúng rồi nó là blockchain đó :v thật ra Dapp sẽ chạy trên nền tảng blockchain). Nhưng nếu mọi node đều giữ database, thiết kế này có tốt về mặt hiệu năng? Dapp giải quyết vấn đề này bằng cách tạo ra các <a href=\"/a-block-of-code/2018/10/18/phan-loai-vi-bitcoin.html\">lightweight node</a>. Phân tích kĩ thuật lightweight node sẽ được giải thích rõ hơn ở các bài viết sau, nói một cách đơn giản, node này sẽ không lưu trữ toàn bộ data của hệ thống, mà chỉ lấy về các data cần thiết.</p>\n\n<p>Nhưng code của ứng dụng sẽ được lưu trữ, deploy như thế nào? Code của bạn sẽ nằm trong các smart contract, thường được viết bằng Solidity. Khi compile, code solidity sẽ được dịch thành Ethereum Byte Code, sau đó được đẩy vào blockchain. Bytecode này sẽ được run trong Ethereum Virtual Machine (EVM).</p>\n\n<h3 id=\"dapp-có-lợi-ích-gì\">Dapp có lợi ích gì?</h3>\n\n<ul>\n  <li>Dapp khả chuyển và dễ mở rộng.</li>\n  <li>Tính sẵn dùng cao, ngay cả khi một phần hệ thống bị lỗi, hay thậm chí chỉ còn 1 node (node đầy đủ) hoạt động, ta có thể khôi phục lại toàn bộ hệ thống từ node này.</li>\n  <li>Không một cá nhân hay tổ chức nào có thể kiểm soát được hệ thống, trừ khi có đủ nguồn lực để thực hiện một cuộc tấn công 51% (khi quy mô của Dapp càng lớn, 51% attack đã dần trở nên bất khả thi).</li>\n</ul>\n"
      } ,
   
      {
        "title"    : "Phân biệt các loại ví Bitcoin",
        "category" : "",
        "tags"     : " bitcoin, blockchain, wallet, coinbase",
        "url"      : "/a-block-of-code/2018/10/18/phan-loai-vi-bitcoin.html",
        "date"     : "October 18, 2018",
        "excerpt"  : "<p>Khi bước chân vào thế giới của bitcoin, dù là kiếm tiền online (MMO), trading, holding… bạn sẽ luôn được hướng dẫn tạo một ví để chứa bitcoin (và chứa nhiều loại tiền điện tử khác, thường thì ví bitcoin sẽ support nhiều loại cryptocurrency khác...",
        "content"  : "<p>Khi bước chân vào thế giới của bitcoin, dù là kiếm tiền online (MMO), trading, holding… bạn sẽ luôn được hướng dẫn tạo một ví để chứa bitcoin (và chứa nhiều loại tiền điện tử khác, thường thì ví bitcoin sẽ support nhiều loại cryptocurrency khác nhau, trong bài này sẽ gọi chung là ví bitcoin). Chọn ví bitcoin là một quá trình chủ quan, phụ thuộc vào mục đích sử dụng và mức độ am hiểu của người dùng. Vì vậy, khó có thể gợi ý cho người khác một thương hiệu hay dự án ví cụ thể nào. Tuy nhiên, vẫn có thể phân loại các ví bitcoin dựa vào nền tảng và chức năng của chúng, qua đó làm rõ hơn về các loại ví đang tồi tại hiện nay.</p>\n\n<h3 id=\"dựa-vào-nền-tảng-sử-dụng\">Dựa vào nền tảng sử dụng</h3>\n\n<h4 id=\"ví-desktop\">Ví desktop</h4>\n\n<p>Ví desktop là dạng ví bitcoin đầu tiên, được tạo ra với vai trò một bản thực thi tham chiếu và được nhiều người sử dụng bởi những tính năng, khả năng tự quản và khả năng tự kiểm soát mà nó mang lại. Tuy nhiên, việc chạy ví trên các hệ điều hành như Windows hay MacOS mang lại nhiều rủi ro bảo mật.</p>\n\n<h4 id=\"ví-di-động\">Ví di động</h4>\n\n<p>Ví di động là dạng ví phổ biến nhất của bitcoin, chạy trên cả 2 nền tảng Android và iOS, thường là lựa chọn thích hợp cho người dùng mới. Nhiều ví dạng này được thiết kế đơn giản và dễ sử dụng, nhưng vẫn có những ví di động với đầy đủ tính năng dành cho người dùng nâng cao.</p>\n\n<h4 id=\"ví-web\">Ví web</h4>\n\n<p>Ví web được truy cập thông qua 1 trình duyệt web và lưu trữ ví của người dùng trên máy chủ do 1 bên thứ 3 sở hữu, mô hình này tương tự như webmail. Một số dịch vụ này sử dụng mã lệnh trên máy khách chạy trên trình duyệt của người dùng, do đó giữ quyền kiểm soát các khóa bitcoin trong tay người dùng.</p>\n\n<p>Ví dụ: khi đăng kí một ví <a href=\"https://www.myetherwallet.com/\">ETH</a>, trình duyệt web sẽ generate ra 1 file chứa script mở khóa, file này được lưu trữ ở phía người dùng. Mỗi khi đăng nhập, ví web ETH yêu cầu cung cấp file để mở khóa.</p>\n\n<p>Tuy nhiên, không phải mọi ví web đều có tính năng này, một số ví chỉ yêu cầu cung cấp mật khẩu dạng text (điển hình như <a href=\"https://www.blockchain.com\">blockchain.info</a> hay <a href=\"https://www.coinbase.com/\">coinbase.com</a>).</p>\n\n<p>Một số quan điểm cho rằng ví web mang lại sự tiện dụng nhưng lại lấy đi quyền kiểm soát khóa bitcoin từ tay người dùng. Do đó, không nên lưu trữ một lượng lớn bitcoin trên hệ thống của bên thứ 3.</p>\n\n<p>Ngoài ra, các sàn giao dịch cũng cung cấp ví bitcoin trực tiếp, nhằm tạo điều kiện thuận lợi cho khách hàng, các ví này cung cấp hầu hết mọi tính năng cần thiết mà một ví bitcoin cần có. Tuy nhiên, không nên trữ quá nhiều tiền tại sàn, chỉ nên giữ một lượng vừa đủ để mua bán, còn lại nên rút về ví (sàn sập thì mất tiền :v).</p>\n\n<h4 id=\"ví-phần-cứng\">Ví phần cứng</h4>\n\n<p>Ví phần cứng là các thiết bị vận hành một ví bitcoin độc lập và bảo mật chạy trên 1 phần cứng chuyên dụng. Chúng được vận hành qua cổng usb với 1 trình duyệt web trên máy tính hoặc qua kết nối near-field communication (NFC) trên 1 thiết bị di động. Do xử lý tất cả các hoạt động liên quan đến bitcoin trên phần cứng chuyên dụng nên các ví này được cho là rất bảo mật và phù hợp để lưu trữ lượng lớn bitcoin.</p>\n\n<h4 id=\"ví-giấy\">Ví giấy</h4>\n\n<p>Có thể in các khóa kiểm soát bitcoin ra để lưu trữ lâu dài. Các ví dạng này được gọi là ví giấy. Ví giấy tuy sử dụng công nghệ thấp nhưng lại có tính an toàn cao. Lưu trữ ngoại tuyến còn được gọi là <em>lưu trữ lạnh</em> (cold storage).</p>\n\n<h3 id=\"dựa-vào-cấp-độ-tự-quản-của-ví-và-cách-chúng-tương-tác-với-mạng-bitcoin\">Dựa vào cấp độ tự quản của ví và cách chúng tương tác với mạng bitcoin</h3>\n\n<h4 id=\"phần-mềm-nút-đầy-đủ-full-node\">Phần mềm nút đầy đủ (full node)</h4>\n\n<p>Phần mềm đầy đủ, hay “nút đầy đủ” là phần mềm lưu trữ toàn bộ lích sử các giao dịch bitcoin, quản lý ví của người dùng và có thể khởi tạo giao dịch trực tiếp trên mạng bitcoin. Một nút đầy đủ xử lý tất cả các khía cạnh của giao thức và có thể độc lập xác thực toàn bộ blockchain cũng như một giao dịch bất kỳ. Full node thường được chạy bởi các thợ đào (miner).</p>\n\n<h4 id=\"phần-mềm-rút-gọn-lightweight-node\">Phần mềm rút gọn (lightweight node)</h4>\n\n<p>Phần mềm rút gọn, hay “phần mềm xác minh giao dịch giản lược” (simple payment verification - SPV), kết nối đến những nút bitcoin đầy đủ để truy cập các thông tin giao dịch bitcoin, nhưng lưu trữ cục bộ ví của người dùng và độc lập khởi tạo, xác thực, chuyển giao các giao dịch. Các phần mềm rút gọn tương tác trực tiếp với mạng bitcoin, không thông qua trung gian.</p>\n\n<h4 id=\"phần-mềm-api-của-bên-thứ-3\">Phần mềm API của bên thứ 3</h4>\n\n<p>Là phần mềm tương tác với bitcoin thông qua 1 hệ thống các API của bên thứ 3, thay vì kết nối trực tiếp đến mạng bitcoin. Ví có thể do người dùng hoặc các máy chủ của bên thứ 3 lưu trữ, nhưng tất cả giao dịch đều phải đi qua 1 bên thứ 3.</p>\n"
      } ,
   
      {
        "title"    : "Bài toán các vị tướng Byzantine",
        "category" : "",
        "tags"     : " byzantine, problems, blockchain",
        "url"      : "/a-block-of-code/2018/10/16/bai-toan-cac-vi-tuong-byzantine.html",
        "date"     : "October 16, 2018",
        "excerpt"  : "<h3 id=\"bài-toán-2-vị-tướng-quân-two-generals-problem\">Bài toán 2 vị tướng quân (Two generals problem)</h3>\n\n<p>Trong ngành khoa học máy tính, bài toán Hai vị tướng là một vấn đề được đưa ra nhằm đạt được thỏa thuận thông qua việc trao đổi thông t...",
        "content"  : "<h3 id=\"bài-toán-2-vị-tướng-quân-two-generals-problem\">Bài toán 2 vị tướng quân (Two generals problem)</h3>\n\n<p>Trong ngành khoa học máy tính, bài toán Hai vị tướng là một vấn đề được đưa ra nhằm đạt được thỏa thuận thông qua việc trao đổi thông tin trong một môi trường không đáng tin cậy. Nội dung bài toán được mô tả như sau:</p>\n\n<p>Ngày xửa ngày xưa, thời binh đao loạn lạc, các quốc gia trên thế giới liên tục gây chiến với nhau nhằm tranh giành lãnh thổ. Ở một trận chiến nọ, có 2 vị tướng, mỗi người lãnh đạo 1 đạo quân, mỗi đạo quân bao vây quân địch ở 2 hướng, nhưng họ bị ngăn cách với quân địch bởi 2 ngọn núi.\n<img src=\"../../../assets/img/posts/two-generals-problem.png\" alt=\"Two generals problem\" />\nQuân địch đông và nguy hiểm, 2 vị tướng nhận thấy họ chỉ giành chiến thắng khi hợp lực tấn công cùng lúc, ngược lại sẽ chuốc lấy thất bại. Do đó, họ cần thống nhất với nhau về thời gian tấn công, nhưng họ trao đổi thông tin với nhau như thế nào?\nỞ thời đại khoa học kĩ thuật chưa phát triển đó, lựa chọn duy nhất của 2 vị tướng là viết thư, rồi cử sứ giả chuyển bức thư đó.</p>\n\n<p>Giải pháp này tồn tại các rủi ro:</p>\n\n<ul>\n  <li>Con đường duy nhất để đưa thư là đi xuyên qua quân địch (đi vòng qua 2 ngọn đồi sẽ mất rất nhiều thời gian), do đó, sứ giả có thể bị bắt, thư không được gửi tới đích.</li>\n  <li>Thư được gửi thành công, nhưng nội dung thư có thể bị sửa đổi (do quân địch mua chuộc, hay do sứ giả phản bội, v.v…)</li>\n</ul>\n\n<p>Một bé gái nào đó đã đưa ra giải pháp cho vấn đề này: <a href=\"https://twitter.com/alexsnaps/status/590993615956156416\">đào 1 đường hầm xuyên qua thung lũng</a>. Đùa thôi, bỏ thời gian và công sức để đào hầm thì đi vòng qua núi sẽ nhanh hơn.</p>\n\n<p>Quay lại phương pháp đưa thư, 1 trong 2 vị tướng sẽ đưa ra ngày giờ tấn công, sau đó gửi thông điệp cho người kia. Nhưng làm thế nào cả 2 biết rằng thông điệp đã được gửi an toàn và được đồng thuận?</p>\n\n<p>Chúng ta cùng xem xét quá trình này:</p>\n\n<ul>\n  <li>Vị tướng A1 gửi đi 1 thông điệp: “Hãy tấn công vào 12:00 ngày 28/04”. Tuy nhiên, sau khi gửi đi, ông hoàn toàn không biết được thông điệp có được gửi đến người kia một cách an toàn hay không.</li>\n  <li>Để xác nhận điều đó, sau khi nhận được thông điệp, vị tướng A2 sẽ viết một thông điệp xác nhận: “Tôi đã nhận được thông điệp, hãy cùng tấn công vào lúc 12:00 ngày 28/04”, và gửi lại cho A1. Nhưng một lần nữa, A2 vẫn không biết chắc rằng thông điệp có được gửi cho A1 hay không.</li>\n  <li>Để chắc chắn hơn, khi vị tướng A1 nhận được thông điệp xác nhận, ông lại gửi tiếp 1 thông điệp với nội dung: “Tôi đã nhận được xác nhận của anh về cuộc tấn công lúc 12:00 ngày 28/04 rồi”. Tuy nhiên, vẫn có những rủi ro cho người đưa thư như đã đề cập ở trên.</li>\n</ul>\n\n<p>Cứ như vậy, cả 2 vị tướng đều bị đặt trong trạng thái băn khoăn, không ai có thể biết được thông điệp của mình có được gửi đến đích hay không, và người kia có đồng ý với kế hoạch tấn công hay không.</p>\n\n<h3 id=\"bài-toán-các-vị-tướng-byzantine-the-byzantine-generals-problem\">Bài toán các vị tướng Byzantine (The Byzantine generals problem)</h3>\n\n<p>Bài toàn các vị tướng Byzantine là phiên bản tổng quát của bài toán Hai vị tướng, miêu tả quân đội Byzantine hùng mạnh, tiến hành vây hãm 1 thành phố. Quân Byznatine chia thành nhiều đạo quân nhỏ, mỗi đạo quân được chỉ huy bởi 1 vị tướng, dưới mỗi vị tướng lại có các chỉ huy. Họ đều liên lạc với nhau bằng cách gửi thư. Các cánh quân phải đồng thuận về việc tất cả cùng tấn công, hoặc cùng rút lui tại cùng một thời điểm xác định. Ngược lại, họ sẽ bị đánh bại.\n<img src=\"../../../assets/img/posts/byzantine-generals-problem.png\" alt=\"The Byzantine generals problem\" />\nNếu tất cả các vị tướng/ chỉ huy đều trung thành, mọi chuyện sẽ thật dễ dàng. Nhưng trong hàng ngũ Byzantine tồn tại những kẻ phản bội.</p>\n\n<p>Giả sử một vị tướng gửi thông điệp “Tấn công” cho 2 chỉ huy dưới quyền, nhưng chỉ huy 2 là kẻ phản bội, hắn sẽ sửa đổi nội dung thông điệp (“Rút lui”) và gửi lại cho chỉ huy 1. Chỉ huy 1 nhận được 2 thông điệp khác nhau và bối rối không biết ai là kẻ phản bội. Nếu chỉ huy 1 tuân theo vị tướng, quân lực sẽ bị giảm đi (do chỉ huy 2 không tấn công), họ sẽ thất bại.\n<img src=\"../../../assets/img/posts/byzantine-traitor.jpeg\" alt=\"traitor-in-army\" />\nNgược lại, nếu chỉ huy là kẻ phản bội, đội quân cũng sẽ thua trận.</p>\n\n<p>Nếu có thêm 1 chỉ huy, hoặc có thêm ý kiến khác trong việc điều quân (ví dụ: “Đang cân nhắc”) sự phức tạp trong việc đồng thuận giữa tướng quân và các chỉ huy sẽ tăng lên nhiều lần. Với đội quân gồm hàng chục vị tướng và hàng trăm chỉ huy, độ phức tạp sẽ tăng theo cấp lũy thừa.\n<img src=\"../../../assets/img/posts/more-lieutenants.jpeg\" alt=\"more-lieutenants\" /></p>\n\n<p>Đây chính là vấn đề đặt ra cho một hệ thống phân tán, điển hình là Blockchain. Tại đó, các nút hoạt động ngang hàng, không hề tồn tại “vị tướng” (server) mà chỉ có các “chỉ huy” với quyền hạn bằng nhau, tương tác với nhau nhằm tìm sự đồng thuận.</p>\n\n<h3 id=\"hệ-thống-chịu-lỗi-byzantine-byzantine-fault-tolerance\">Hệ thống chịu lỗi Byzantine (Byzantine Fault Tolerance)</h3>\n\n<p>Hệ thống chịu lỗi Byzantine là hệ thống có thể giải quyết vấn đề của bài toán các vị tướng Byzantine.\nVào năm 2008, cha đẻ của Bitcoin, Satoshi Nakamoto đã giới thiệu một phương pháp nhằm giải quyết bài toán các vị tướng Byzantine, ông gọi phương pháp này là Proof-of-Work (PoW), hay “Bằng chứng công việc”. Satoshi đã trực tiếp giải thích về cách Bitcoin dùng PoW để giải quyết bài toán các vị tướng Byzantine trong một email gửi đi ngày 14/11/2008, bạn có thể xem qua tại <a href=\"https://satoshi.nakamotoinstitute.org/emails/cryptography/11/#selection-71.45-97.32\">đây</a>:\n<img src=\"../../../assets/img/posts/satoshi-explains-pow.png\" alt=\"satoshi-explains-proof-of-work\" /></p>\n"
      } 
   
   
   
  
]